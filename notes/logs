8/26/2021
- scraped discord messages to make a training dataset
- scraper: https://github.com/Tyrrrz/DiscordChatExporter/
- message source: Aerin Chu, who kindly gave permission for us to use her messages
- pasted basic markovify program
comments:
  - make sure program can detect the end of a sentence/phrase; people don't usually fully punctuate discord messages
  - denote end of sentence/phrase?? when do people split up their messages
  - unconventional language: misspelled words ("heyyyyy"), emojis (":3"), keysmashes ("sdfjsk")
  - sentiment analysis? 


8/27/2021
- cleaned aerin1.txt --> aerin1cleaned1.txt (data preprocessing)
- ran through markovify
- modified default call so that markovify delineates new lines as "sentences" rather than looking for punctuation

comments:
  - need to consider what the bot is responding to! how??
  - use markovify.NewlineText to delineate new segment of text?* done
  - ideas:
    - make it so bot can also return wordclouds? word frequencies, etc.
    - live scraping? make it so it updates every time
    - mood? sentiment analysis?
  - ask josh for discord bot help!!
  Niema: 
  - state_size is order of markov chain (how many previous words the generated word depends on)
  - for live scraping: update chain, retrain
  - classify types of messages? for replies -- jokes, positive/negative (sentiment analysis)

8/28/2021
- intent classification
  - ex. greetings, identity
- scraping messages + replies
- after scraping, use markov chain to generate different answers for certain questions
- NLU (natural language understanding) datasets, machine learning datasets, NLP datasets
- movie script datasets
- python chatbot library

Goals list:
- Bare minimum - discord bot that generates aerinlike sentences
  - how do we make it more realistic?
- "good to have" goal - discord bot that can respond to text
  - classifies text (sentiment/mood and type of response), message it's responding to
- stretch goal - discord bot retrains itself live given a response 

Steps?
1. make a markov generator + train it on aerin's texts (DONE)
2. classify intent of these texts
3. scrape data + classify intent of messages it could respond to (the messages aerin was responding to)
(unclear zone)

?. discord bot basics, coding, how to implement this code into discord, how to get inputs, how to scrape live messages
*** 8/31-9/2 (last three days): do the discord stuff

back to 8/28/21:
  to do:
  - overall: create a working chatbot!
  - import chatterbot
  - scrape data!
  - use data to train bot

  ERROR: couldn't download chatterbot on replit IDE 

8/29/21:
- started formatting aerinconvo
  - chatterbot training section: trains bot using input-response format
  - take all conversations and format them to someone else, aerin's response x1000

- couldn't install chatterbot on replit (takes eons, error: disk quota exceeded)
  - using own IDE: VSCode
  - worked! very fast
  - *will use VSCode to run chatterbot, replit to update logs + preprocess data
    - find way to upload everything to github
    - might just move to VS

- how to automate data preprocessing?
  - format into chatterbot conversation
  - lines 8000 - 12000 (jenny - aerin convo)

- explored chatterbot
    - trained it on test dialogue + returned response
  - continuing to format dialogue

  * how to retrain bot from scratch
  ** chatterbot doesn't seem to differentiate between speaker 1 and speaker 2

late 8/29/21:
- rewrote + optimized cleaner (fixed reactions, etc)
- successfully built a discord bot (on VSCode) that can generate markovified text on command (not aerin's, but nonetheless)!
  - *not always online though; smth about keeping it online through heroku?? o_o
- now have basic knowledge to implement actual bot
- retrain bot from scratch: chatbot.storage.drop()

next up:
- speaker differentiation: how to get chatterbot to only speak like aerin
  - idea: train it on two line "call - response" exchanges (responses being aerin's) to avoid confusion
- getting chatterbot to work with discord
- data preprocessing??? how do we make this easier

8/30/21:

Henry:
- look into chatterbot's default datasets to see how it works / how to format it
- look into removing extraneous

Done:
- fixed + finalized cleaner (data preprocessor)
- moved to vscode completely, updated GitHub (ty yukati)
- Aerin-Jenny conversation cleaned up and sorted into conversation style (call-response style)
- wrote call-response training code
- ran chatterbot on cleaned snippet of aerin-jenny conversation
- created working discord bot
  - sends markov generated messages

- tried to integrate chatterbot into discord bot
  - it's learning??? from our responses??? (HOW)

- idea: train bot using reactions! use reactions as some kind of "score" for how realistic/funny it's being

8/31/21:
- go through chatterbot's documentation
- opened training database file in sqlite to view it as a table

Notes:
- chatterbot corpus: other training format. call/response but is formatted in a -- call - response format
  https://github.com/gunthercox/chatterbot-corpus/blob/master/chatterbot_corpus/data/english/
  - are multiple community-made corpii like "greetings, humor", etc
- how can we modify it so it doesn't learn from our messages?
  - maybe make it so the inputted response is never added as a possible output? how
- how do we separate greetings, jokes, etc into a separate training thing?
- how can we "untrain" it?
  - chatterbot --> storage --> sql_storage.py (https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/sql_storage.py)
  - several useful functions including "remove"
  - does this "untrain" the bot?
- is it possible to limit who the bot learns from (aerin only)?

- chatterbot --> examples (https://github.com/gunthercox/ChatterBot/blob/master/examples/))
  - specific response example?
  - *learning feedback example (!) --> use reactions to score?
  - default response example --> maximum_similarity_threshold?
    - logic adapters

Henry: 
  - implement markov chain by using own training class
  - more data / look into intent classification
    - intent classification --> dividing inputs into categories
    - make own trainer class
  - limit learning after training!
  - make own model from chatterbot --> pickle library

Did:
  - figured out how to stop chatterbot from learning post-training!
  - started writing new cleaner
  - update: finished writing new cleaner2.py!
  - ran aerinjennconvo1.txt through chatterbot.

To do:
 - explore chatterbot corpus function
 - write new training class w/ markov chains
 - what is going on with the discord bot? sending the same message multiple times?
  - just a bug

9/1/21:
- set up greetings + goodbyes corpii

To do:
- train chatterbot on corpii (Done)
- write new training class w/ markov chains (?)
  - how?
  - other idea: have chatterbot generate a response if it isn't confident about an answer
    - generates from aerin1.txt
- look into intent classification
- look into the python pickle library
- look into a feedback system

idea: 
- use tagged datasets for positive/negative reactions
- tags = positive, negative

  extra:
  - custom goodbyes / using peoples' names
  - instead of writing cleaners, write a new training class
  - make bot always online (heroku)

- how do we use all of aerin's data?

- use markov chain on data to expand database before feeding
- manipulate training class to also generate response
  - generate_export_data
  - find output function

- split data into
- chatterbot minimize cost function 
  - want cost to be near 0
  - when passing generated text through markov chain
  